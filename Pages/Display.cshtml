@page
@model IndexModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Http;
@using FireSharp.Config;
@using FireSharp.Interfaces;
@using FireSharp.Response;
@using Newtonsoft.Json;


@functions {
    public class Book{
        public string id = "";
        public string status = "";
        public string title = "";
        public string author = "";
        public string history = "";
        public void s0(){
            status = "Available";
        }
    }


    public class IndexModel : PageModel
    {
        public string emailMessage { get; set; } = "Logged in as: NONE";
        public string email {get;set;} = "";
        public List<Book> books = new List<Book>();
        public async Task OnGetAsync(){
            await access();
          }
        
        public async Task access(){
            email = HttpContext.Session.GetString("_Email");
            emailMessage = $"Logged in as: {email}"; 
            IFirebaseConfig config = new FirebaseConfig
            {
                AuthSecret = "1YwwPshIwO1oaE0PgpyCJc7cG5CMezZovmE7TDTw",
                BasePath = "https://library-application-5c7df.firebaseio.com/"
            };
            IFirebaseClient client;
            client = new FireSharp.FirebaseClient(config);
            //HARDCODED PULL FROM DB: only way to retrieve firebase docs without building entire JSON converter
            FirebaseResponse response2 = await client.GetAsync("Books/754103890");
            Book obj2 = response2.ResultAs<Book>();
            books.Add(obj2);
            FirebaseResponse response3 = await client.GetAsync("Books/121311172");
            Book obj3 = response3.ResultAs<Book>();
            books.Add(obj3);
            FirebaseResponse response4 = await client.GetAsync("Books/175967048");
            Book obj4 = response4.ResultAs<Book>();
            books.Add(obj4);
            FirebaseResponse response5 = await client.GetAsync("Books/314029828");
            Book obj5 = response5.ResultAs<Book>();
            books.Add(obj5);
            FirebaseResponse response6 = await client.GetAsync("Books/514836590");
            Book obj6 = response6.ResultAs<Book>();
            books.Add(obj6);
            FirebaseResponse response7 = await client.GetAsync("Books/826278709");
            Book obj7 = response7.ResultAs<Book>();
            books.Add(obj7);
            for (int i =0;i<books.Count;i++){
                if (String.IsNullOrEmpty(books[i].status)){
                    books[i].s0();
                }
            }
        }

        public async Task OnPostEdit(string sortType, string target)
        {
            await access();
            for (int i =0;i<books.Count;i++){
                if (String.IsNullOrEmpty(books[i].status)){
                    books[i].s0();
                }
            }
            if (target.Equals("available")){
                for (int i = 0;i<books.Count;i++){
                    if (!books[i].status.Equals("Available")){
                        books.RemoveAt(i);
                        i-=1;
                    }
                }
            }
            else if (target.Equals("user")){
                for (int i = 0;i<books.Count;i++){
                    Console.WriteLine(email + "---" + books[i].status);
                    if (!books[i].status.Equals(email)){
                        books.RemoveAt(i);
                        i-=1;
                    }
                }
            }
            if (sortType.Equals("aa")){
                List<Book> newList = books.OrderBy(o=>o.author).ToList();
                books = newList;
            }
            else if (sortType.Equals("ad")){
                List<Book> newList = books.OrderByDescending(o=>o.author).ToList();
                books = newList;
            }
            else if (sortType.Equals("ta")){
                List<Book> newList = books.OrderBy(o=>o.title).ToList();
                books = newList;
            }
            else if (sortType.Equals("td")){
                List<Book> newList = books.OrderByDescending(o=>o.title).ToList();
                books = newList;
            }
        }

    }
}

<h2 class = "text-center">LIBRARY APPLICATION - Display</h2>
<hr/>
<div class = "text-right">
<p>@Model.emailMessage</p>
</div>
<form asp-page-handler="edit" method="post"> 
    <div class = "text-center">
        <h5>Take out/return books:</h5>
        <select name = "sortType">
            <option value = "aa">Author - Ascending</option>
            <option value = "ad">Author - Descending</option>
            <option value = "ta">Title - Ascending</option>
            <option value = "td">Title - Descending</option>
        </select>
        <select name = "target">
            <option value = "all">All</option>
            <option value = "available">Available</option>
            <option value = "user">Taken By User</option>
        </select>
        <button>Submit</button>
        <h6>CURRENT BOOKS:</h6>
        <table style="width:100%">
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ID</th>
                <th>Status</th>
            </tr>
            @foreach (var tempBook in @Model.books)
            {
            <tr>
                <td>@tempBook.title</td>
                <td>@tempBook.author</td>
                <td>@tempBook.id</td>
                <td>@tempBook.status</td>
            </tr>
            }
        </table>
    </div>
</form>