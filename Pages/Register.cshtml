@page
@model IndexModel
@using Microsoft.AspNetCore.Mvc.RazorPages

@functions {
    public class IndexModel : PageModel
    {
        public string emailMessage { get; set; } = "Logged in as: NONE";
        public string historyIdMessage { get; set; } = "";
        public string changeIdMessage {get;set;} = "";

        public string addIdMessage {get;set;} = "";
        public string deleteIdMessage {get;set;} = "";


        public string returnIdMessage{get;set;} = "";
        public string takeoutIdMessage{get;set;} = "";
        public string email {get;set;} = "";
        public string historyId {get;set;} = "";
        public Boolean login {get;set;}= false;

        public string[] history = {"John: 11/8 - 11/10","Steve: 11/12 - 11/14","Phil: 11/17 - 11/20"};

        public void OnPostEdit(string takeoutId, string returnId, string emailIn, string historyIdIn, string changeIdIn, string changeQty, string delTitle, string addTitle, string addAuthor)
        {
            //change email
            changeEmail(emailIn);
            //book history message
            changeHistory(historyIdIn);
            //ID message
            changeInventory(changeIdIn, changeQty, delTitle, addTitle);
            //take out/return
            returnBook(returnId, takeoutId);
        }
        public void changeEmail(string emailIn){
            if (string.IsNullOrEmpty(emailIn)){
                email = email;
            }
            else{
                email = emailIn;
                login = true;
            }
            emailMessage = $"Logged in as: {email}";
        }

        public void changeHistory(string historyIdIn){
            if (string.IsNullOrEmpty(historyIdIn)){
                historyId = this.historyId;            
                }
            else{
                historyId = historyIdIn;
            }
            historyIdMessage = $"(Book #{historyId})";
        }

        public void changeInventory(string changeIdIn, string changeQty, string delTitle, string addTitle){
            if(!String.IsNullOrEmpty(changeIdIn) && !String.IsNullOrEmpty(changeQty)){
                changeIdMessage = "Added " + changeQty + " of book " + changeIdIn;
            }
            if(!String.IsNullOrEmpty(delTitle)){
                deleteIdMessage = "Deleted title: " + delTitle;
            }
            if(!String.IsNullOrEmpty(addTitle)){
                addIdMessage = "Added title: " + addTitle;
            } 
            }
        
        public void returnBook(string returnId, string takeoutId){
            if(!String.IsNullOrEmpty(returnId)){
                returnIdMessage = $"(Successfully returned #{returnId})";
            }
            if(!String.IsNullOrEmpty(takeoutId)){
                takeoutIdMessage = $"(Successfully took out #{takeoutId})";
            }
        }
    }
}

<h2 class = "text-center">LIBRARY APPLICATION</h2>
<hr/>
<div class = "text-right">
<p>@Model.emailMessage</p>
</div>
<form asp-page-handler="edit" method="post"> 
    <div class = "text-center">
    <!-- Login/logout -->
        <h5>Please enter your email below to continue:</h5>
        <label>Email:</label>
        <input type = "email" name = "emailIn" value = @Model.email />
        <button>Submit</button>
    </div>
    <hr/>
    <div class = "text-center">
    <!-- Edit Inventory -->
        <h5>Edit Inventory:</h5>
        <!-- Change Quantity -->
        <h6>Change Quantity</h6>
        <label>Book ID:</label>
        <input type = "text" name = "changeIdIn"/>
        <label>QTY to Add:</label>
        <input type = "text" name = "changeQty"/>
        <button>Submit</button>
        <!-- Delete Book -->
        <h6>Delete Book</h6>
        <label>Title:</label>
        <input type = "text" name = "delTitle"/>
        <button>Submit</button>
        <!-- Add Book -->
        <h6>Add Book</h6>
        <label>Title:</label>
        <input type = "text" name = "addTitle"/>
        <label>Author(s):</label>
        <input type = "text" name = "addAuthor"/>
        <button>Submit</button>
        <br/><br/>
        <p>@Model.changeIdMessage</p>
        <p>@Model.deleteIdMessage</p>
        <p>@Model.addIdMessage</p>
    </div>
    <hr/>
    <div class = "text-center">
    <!-- Login/logout -->
        <h5>Take out/return books:</h5>
        <label>Return ID:</label>
        <input type = "text" name = "returnId"/>
        <button>Submit</button>
        <br/>
        <label>Checkout ID:</label>
        <input type = "text" name = "takeoutId"/>
        <button>Submit</button>
        <p>@Model.returnIdMessage</p>
        <p>@Model.takeoutIdMessage</p>
    </div>
    <hr/>
    <div class = "text-center">
    <!-- Login/logout -->
        <h5>Show available:</h5>
    </div>
    <hr/>
    <div class = "text-center">
    <!-- Login/logout -->
        <h5>Show history: @Model.historyIdMessage</h5>
        <label>Book ID:</label>
        <input type = "text" name = "historyIdIn"/>
        <button>Submit</button>
        @foreach (var person in @Model.history)
        {
        <p>@person</p>
        }
    </div>
</form>
