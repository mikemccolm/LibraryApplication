@page
@model IndexModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Http;
@using MailKit.Net.Smtp;
@using MailKit;
@using MimeKit;
@using FireSharp.Config;
@using FireSharp.Interfaces;
@using FireSharp.Response

@functions {
    //helper class
    public class Book{
        public string id = "";
        public string status = "";
        public string title = "";
        public string author = "";
        public string history = "";
        //mutator
        public void setVals(string idIn, string titleIn, string authorIn, string statusIn, string historyIn){
            id = idIn;
            title = titleIn;
            history = historyIn;
            author = authorIn;
            status = statusIn;
        }

    }
    public class IndexModel : PageModel
    {
        public string email {get;set;} = "";
        public string returnIdMessage{get;set;} = "";
        public string takeoutIdMessage{get;set;} = "";
        public string emailMessage { get; set; } = "Logged in as: NONE";

        //load email
        public void OnGetAsync(){
            email = HttpContext.Session.GetString("_Email");
            emailMessage = $"Logged in as: {email}"; 
        }
        //handle submission of form
        public void OnPostEdit(string takeoutId, string returnId)
        {   
            //load email
            email = HttpContext.Session.GetString("_Email");
            emailMessage = $"Logged in as: {email}";
            //take out/return book
            if (!String.IsNullOrEmpty(email)){
                returnBook(returnId, takeoutId);
            } 
        }
        //send email
        public void sendEmail(string title, string email){
            var message = new MimeMessage();
            message.From.Add(new MailboxAddress("Library-Application","emailsender974@gmail.com"));
            message.To.Add(new MailboxAddress("User", email)); //change this to email
            message.Subject = "Book Notification";
            message.Body = new TextPart("plain"){
                Text = "You took out the following book: " + title + ". Please return it within 7 days."
            };

            using (var client = new SmtpClient()){
                client.Connect("smtp.gmail.com",587,false);
                client.Authenticate("emailsender974@gmail.com","emailsend");
                client.Send(message);
                client.Disconnect(true);
            }
        }

        //return book
        public async Task returnBook(string returnId, string takeoutId){
            //connect to db
            IFirebaseConfig config = new FirebaseConfig
            {
                AuthSecret = "1YwwPshIwO1oaE0PgpyCJc7cG5CMezZovmE7TDTw",
                BasePath = "https://library-application-5c7df.firebaseio.com/"
            };
            IFirebaseClient client;
            client = new FireSharp.FirebaseClient(config);
            //if value is present
            if(!String.IsNullOrEmpty(returnId)){
                try{
                    //pull data
                    FirebaseResponse response = await client.GetAsync("Books/"+returnId);
                    Book obj = response.ResultAs<Book>();
                    //create new book
                    string id = obj.id;
                    string status = "";
                    string author = obj.author;
                    string title = obj.title;
                    //mark return time
                    string history = obj.history + ", Returned: " + DateTime.Now + " | ";
                    Book b1 = new Book();
                    //write new data back to database
                    b1.setVals(id,status,author,title,history);
                    await client.SetAsync("Books/"+returnId,b1);
                    returnIdMessage = $"(Successfully returned #{returnId})";
                }
                //if record does not exist
                catch(NullReferenceException ex){
                    returnIdMessage = "Could not find record";
                }

            }
            //takeout book
            if(!String.IsNullOrEmpty(takeoutId)){
                try{
                    //if record exists, pull data
                    FirebaseResponse response = await client.GetAsync("Books/"+takeoutId);
                    Book obj = response.ResultAs<Book>();
                    if(String.IsNullOrEmpty(obj.status)){
                        string id = obj.id;
                        string status = email;
                        string author = obj.author;
                        string title = obj.title;
                        //write date and user to history
                        string history = obj.history + " User: " + email + ", Taken Out: " + DateTime.Now; 
                        Book b1 = new Book();
                        b1.setVals(id,status,author,title,history);
                        //write back to database
                        await client.SetAsync("Books/"+takeoutId,b1);
                        sendEmail(title, email);
                        takeoutIdMessage = $"(Successfully took out #{takeoutId})";
                    }
                }
                //if record does not exist
                catch{
                    takeoutIdMessage = "Could not find record";
                }

            }
        }
    }
}

<h2 class = "text-center">LIBRARY APPLICATION - Checkout</h2>
<hr/>
<div class = "text-right">
<p>@Model.emailMessage</p>
</div>
<form asp-page-handler="edit" method="post"> 
    <div class = "text-center">
    <!-- Takeout/return-->
        <h5>Take out/return books:</h5>
        <label>Return ID:</label>
        <input type = "text" name = "returnId"/>
        <button>Submit</button>
        <br/>
        <label>Checkout ID:</label>
        <input type = "text" name = "takeoutId"/>
        <button>Submit</button>
        <p>@Model.returnIdMessage</p>
        <p>@Model.takeoutIdMessage</p>
    </div>
</form>